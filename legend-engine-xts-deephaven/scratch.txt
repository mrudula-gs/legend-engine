parser grammar LakehouseMappingParserGrammar;
import RelationalParserGrammar;

options
{
    tokenVocab = LakehouseMappingLexerGrammar;
}

// -------------------------------------- IDENTIFIER --------------------------------------
unquotedIdentifier: VALID_STRING
                  | ALL | LET | ALL_VERSIONS | ALL_VERSIONS_IN_RANGE
                  | TO_BYTES_FUNCTION
                  | INGEST_SOURCE_CMD | ACCESS_POINT_SOURCE_CMD
;

identifier: unquotedIdentifier | STRING
;

// -------------------------------------- LAKEHOUSE MAPPING DEFINITION --------------------------------------
lakehouseClassMapping: (ingestSrc | accessPointSrc)
                       (propertyMapping (COMMA propertyMapping)*)?
                       EOF
;

ingestSrc: INGEST_SOURCE_CMD databasePointer qualifiedName
;

accessPointSrc: ACCESS_POINT_SOURCE_CMD databasePointer qualifiedName
;

propertyMapping: qualifiedName STAR? COLON operation
;

mappingScopeInfo: unquotedIdentifier
;

// -------------------------------------- OPERATION --------------------------------------
operation: booleanOperation
         | functionExpression
         | expression
;

functionExpression: databasePointer identifier ARROW identifier functionExpressionParameters
;

functionExpressionParameters: PAREN_OPEN (functionOperationArgument (COMMA functionOperationArgument)*)? PAREN_CLOSE
;

functionOperationArgument: operation | anyLambda | qualifiedName
;

anyLambda: BRACE_OPEN (lambdaParam (COMMA lambdaParam)*)? PIPE operation BRACE_CLOSE
;

lambdaParam: identifier
;

expression: atomicExpression (equalNotEqual)?
;

equalNotEqual: (TEST_EQUAL | TEST_NOT_EQUAL) atomicExpression
;

atomicExpression: columnOperation
                | constant
                | anyLambda
                | PAREN_OPEN operation PAREN_CLOSE
;

columnOperation: databasePointer? tableAliasColumnOperation
               | variable DOT relationalIdentifier
;

variable: DOLLAR identifier
;

constant: STRING | INTEGER | FLOAT
;

// -------------------------------------- BUILDING BLOCK --------------------------------------
scopeInfo: relationalIdentifier (DOT relationalIdentifier)?
;

databasePointer: BRACKET_OPEN qualifiedName BRACKET_CLOSE
;

relationalIdentifier: unquotedIdentifier | QUOTED_STRING
;
