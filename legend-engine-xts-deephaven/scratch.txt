i don't see any explicit grammar defined to parse this, may be this addressed in one of these ?
so like may not exactly as a join but just takes up as any other function - so here its join function with bunch of parameters to it

parser grammar M3ParserGrammar;

import CoreParserGrammar;


// -------------------------------------- IDENTIFIER --------------------------------------

identifier:                                     VALID_STRING | STRING
                                                | ALL | LET | ALL_VERSIONS | ALL_VERSIONS_IN_RANGE
                                                | TO_BYTES_FUNCTION
;

// -------------------------------------- EXPRESSION & VALUE SPECIFICATION --------------------------------------

nonArrowOrEqualExpression :
                                                (
                                                    atomicExpression
                                                    | notExpression
                                                    | signedExpression
                                                    | expressionsArray
                                                    | (PAREN_OPEN combinedExpression PAREN_CLOSE)
                                                )
;

expression:                                     (
                                                    nonArrowOrEqualExpression
                                                    (
                                                        (propertyOrFunctionExpression)*
                                                        (equalNotEqual)?
                                                    )
                                                )
;


instance:                                       NEW_SYMBOL qualifiedName (LESS_THAN typeArguments? (PIPE multiplicityArguments)? GREATER_THAN)? identifier?
                                                (FILE_NAME COLON INTEGER COMMA INTEGER COMMA INTEGER COMMA INTEGER COMMA INTEGER COMMA INTEGER FILE_NAME_END)? (AT qualifiedName)?
                                                    PAREN_OPEN
                                                        (instancePropertyAssignment (COMMA instancePropertyAssignment)*)?
                                                    PAREN_CLOSE
;
unitInstance:                                   unitInstanceLiteral unitName
;
unitName:                                       qualifiedName TILDE identifier
;
instancePropertyAssignment:                     identifier EQUAL instanceRightSide
;
instanceRightSide:                              instanceAtomicRightSideScalar | instanceAtomicRightSideVector
;
instanceAtomicRightSideScalar:                  instanceAtomicRightSide
;
instanceAtomicRightSideVector:                  BRACKET_OPEN (instanceAtomicRightSide (COMMA instanceAtomicRightSide)* )? BRACKET_CLOSE
;
instanceAtomicRightSide:                        instanceLiteral
                                                | LATEST_DATE
                                                | instance
                                                | qualifiedName
                                                | enumReference
                                                | stereotypeReference
                                                | tagReference
                                                | identifier
;
enumReference:                                  qualifiedName  DOT identifier
;
stereotypeReference:                            qualifiedName AT identifier
;
tagReference:                                   qualifiedName PERCENT identifier
;
propertyReturnType:                             type multiplicity
;
codeBlock:                                      programLine (SEMI_COLON (programLine SEMI_COLON)*)?
;
programLine:                                    combinedExpression | letExpression
;
equalNotEqual:                                  (TEST_EQUAL | TEST_NOT_EQUAL) combinedArithmeticOnly
;
combinedArithmeticOnly:                         expression arithmeticPart*
;
expressionPart:                                 booleanPart | arithmeticPart
;
letExpression:                                  LET identifier EQUAL combinedExpression
;
combinedExpression:                             expression expressionPart*
;
expressionsArray:                               BRACKET_OPEN ( expression (COMMA expression)* )? BRACKET_CLOSE
;
propertyOrFunctionExpression:                   propertyExpression | functionExpression | propertyBracketExpression
;
propertyExpression:                             DOT identifier (functionExpressionLatestMilestoningDateParameter | functionExpressionParameters)?
;
propertyBracketExpression:                      BRACKET_OPEN (STRING | INTEGER)  BRACKET_CLOSE
;
functionExpression:                             ARROW qualifiedName functionExpressionParameters (ARROW qualifiedName functionExpressionParameters)*
;
functionExpressionLatestMilestoningDateParameter:
                                                PAREN_OPEN LATEST_DATE (COMMA LATEST_DATE)? PAREN_CLOSE
;
functionExpressionParameters:                   PAREN_OPEN (combinedExpression (COMMA combinedExpression)*)? PAREN_CLOSE
;
atomicExpression:                               dsl
                                                | instanceLiteralToken
                                                | expressionInstance
                                                | unitInstance
                                                | variable
                                                | columnBuilders
                                                | (AT type)
                                                | anyLambda
                                                | instanceReference
;

columnBuilders: TILDE (oneColSpec | colSpecArray)
;
oneColSpec: identifier ((COLON (type | anyLambda) extraFunction? ))?
;
colSpecArray: (BRACKET_OPEN (oneColSpec(COMMA oneColSpec)*)? BRACKET_CLOSE)
;
extraFunction: (COLON anyLambda)
;

anyLambda : lambdaPipe | lambdaFunction | lambdaParam lambdaPipe
;

instanceReference:                              (PATH_SEPARATOR | qualifiedName | unitName) allOrFunction?
;
lambdaFunction:                                 BRACE_OPEN (lambdaParam (COMMA lambdaParam)* )? lambdaPipe BRACE_CLOSE
;
variable:                                       DOLLAR identifier
;
allOrFunction:                                  allFunction
                                                | allVersionsFunction
                                                | allVersionsInRangeFunction
                                                | allFunctionWithMilestoning
                                                | functionExpressionParameters
;
allFunction:                                    DOT ALL PAREN_OPEN PAREN_CLOSE
;
allVersionsFunction:                            DOT ALL_VERSIONS PAREN_OPEN PAREN_CLOSE
;
allVersionsInRangeFunction:                     DOT ALL_VERSIONS_IN_RANGE PAREN_OPEN buildMilestoningVariableExpression COMMA buildMilestoningVariableExpression PAREN_CLOSE
;
allFunctionWithMilestoning:                     DOT ALL PAREN_OPEN buildMilestoningVariableExpression (COMMA buildMilestoningVariableExpression)? PAREN_CLOSE
;
buildMilestoningVariableExpression:             LATEST_DATE | DATE | variable
;
expressionInstance:                             NEW_SYMBOL (variable | qualifiedName)
                                                (LESS_THAN typeArguments? (PIPE multiplicityArguments)? GREATER_THAN)? (identifier)?
                                                (typeVariableValues)?
                                                PAREN_OPEN
                                                    expressionInstanceParserPropertyAssignment? (COMMA expressionInstanceParserPropertyAssignment)*
                                                PAREN_CLOSE
;
expressionInstanceRightSide:                    expressionInstanceAtomicRightSide
;
expressionInstanceAtomicRightSide:              combinedExpression | expressionInstance | qualifiedName
;
expressionInstanceParserPropertyAssignment:     identifier (DOT identifier)* PLUS? EQUAL expressionInstanceRightSide
;
notExpression:                                  NOT expression
;
signedExpression:                               (MINUS | PLUS) expression
;
lambdaPipe:                                     PIPE codeBlock
;
lambdaParam:                                    identifier lambdaParamType?
;
lambdaParamType:                                COLON type multiplicity
;
primitiveValue:                                 primitiveValueAtomic | primitiveValueVector
;
primitiveValueVector:                           BRACKET_OPEN (primitiveValueAtomic (COMMA primitiveValueAtomic)* )? BRACKET_CLOSE
;
primitiveValueAtomic:                           instanceLiteral | toBytesLiteral | enumReference
;
instanceLiteral:                                instanceLiteralToken | (MINUS INTEGER) | (MINUS FLOAT) | (MINUS DECIMAL) | (PLUS INTEGER) | (PLUS FLOAT) | (PLUS DECIMAL)
;
instanceLiteralToken:                           STRING | INTEGER | FLOAT | DECIMAL | DATE | BOOLEAN | STRICTTIME
;
toBytesLiteral:                                 TO_BYTES_FUNCTION PAREN_OPEN STRING PAREN_CLOSE
;
unitInstanceLiteral:                            (MINUS? INTEGER) | (MINUS? FLOAT) | (MINUS? DECIMAL) | (PLUS INTEGER) | (PLUS FLOAT) | (PLUS DECIMAL)
;
arithmeticPart:                                 (
                                                    PLUS expression (PLUS expression)*
                                                    | (STAR expression (STAR expression)*)
                                                    | (MINUS expression (MINUS expression)*)
                                                    | (DIVIDE expression (DIVIDE expression)*)
                                                    | (LESS_THAN expression)
                                                    | (LESS_OR_EQUAL expression)
                                                    | (GREATER_THAN expression)
                                                    | (GREATER_OR_EQUAL expression)
                                                )
;
booleanPart:                                    (AND expression) | (OR  expression)
;
functionVariableExpression:                     identifier COLON type multiplicity
;
dsl:                                            dslExtension | dslNavigationPath
;
dslNavigationPath:                              NAVIGATION_PATH_BLOCK
;
dslExtension:                                   ISLAND_OPEN (dslExtensionContent)*
;
dslExtensionContent:                            ISLAND_START | ISLAND_BRACE_OPEN | ISLAND_CONTENT | ISLAND_HASH | ISLAND_BRACE_CLOSE | ISLAND_END
;
type:                                           (qualifiedName (LESS_THAN typeArguments? (PIPE multiplicityArguments)? GREATER_THAN)?) typeVariableValues?
                                                |
                                                (
                                                    BRACE_OPEN
                                                        functionTypePureType? (COMMA functionTypePureType)*
                                                        ARROW type multiplicity
                                                    BRACE_CLOSE
                                                )
                                                |
                                                    relationType
                                                |
                                                unitName
;


relationType :  PAREN_OPEN
                   columnInfo (COMMA columnInfo)*
                PAREN_CLOSE
;

columnInfo: columnName COLON type multiplicity?
;

columnName: identifier
;

typeVariableValues: PAREN_OPEN (instanceLiteral (COMMA instanceLiteral)*)? PAREN_CLOSE
;

functionTypePureType:                           type multiplicity
;
typeAndMultiplicityParameters:                  LESS_THAN ((typeParameters multiplictyParameters?) | multiplictyParameters) GREATER_THAN
;
typeParametersWithContravarianceAndMultiplicityParameters:
                                                LESS_THAN ((contravarianceTypeParameters multiplictyParameters?) | multiplictyParameters) GREATER_THAN
;
typeParameters:                                 typeParameter (COMMA typeParameter)*
;
typeParameter:                                  identifier
;
contravarianceTypeParameters:                   contravarianceTypeParameter (COMMA contravarianceTypeParameter)*
;
contravarianceTypeParameter:                    MINUS? identifier
;
multiplicityArguments:                          multiplicityArgument (COMMA multiplicityArgument)*
;
typeArguments:                                  type (COMMA type)*
;
multiplictyParameters:                          PIPE identifier (COMMA identifier)*
;




multiplicity:                                   BRACKET_OPEN multiplicityArgument BRACKET_CLOSE
;
multiplicityArgument:                           identifier | ((fromMultiplicity DOT_DOT)? toMultiplicity)
;
fromMultiplicity:                               INTEGER
;
toMultiplicity:                                 INTEGER | STAR
;



functionIdentifier:                             qualifiedName PAREN_OPEN (functionTypePureType (COMMA functionTypePureType)*)? PAREN_CLOSE COLON functionTypePureType
;



parser grammar DomainParserGrammar;

import M3ParserGrammar;

options
{
    tokenVocab = DomainLexerGrammar;
}


// -------------------------------------- IDENTIFIER --------------------------------------

identifier:                                     VALID_STRING | STRING
                                                | ALL | LET | ALL_VERSIONS | ALL_VERSIONS_IN_RANGE
                                                | TO_BYTES_FUNCTION      // from M3Parser
                                                | IMPORT
                                                | CLASS | FUNCTION | PROFILE | ASSOCIATION | ENUM | MEASURE
                                                | EXTENDS
                                                | STEREOTYPES | TAGS
                                                | NATIVE | PROJECTS | AS
                                                | CONSTRAINT_ENFORCEMENT_LEVEL_ERROR | CONSTRAINT_ENFORCEMENT_LEVEL_WARN
                                                | AGGREGATION_TYPE_COMPOSITE | AGGREGATION_TYPE_SHARED | AGGREGATION_TYPE_NONE
;


// -------------------------------------- DEFINITION --------------------------------------

definition:                                     imports
                                                    elementDefinition*
                                                EOF
;
imports:                                        importStatement*
;
importStatement:                                IMPORT packagePath PATH_SEPARATOR STAR SEMI_COLON
;
elementDefinition:                              (
                                                    profile
                                                    | classDefinition
                                                    | association
                                                    | enumDefinition
                                                    | nativeFunction
                                                    | functionDefinition
                                                    | instance
                                                    | measureDefinition
                                                )
;


// -------------------------------------- SHARED --------------------------------------

stereotypes:                                    LESS_THAN LESS_THAN stereotype (COMMA stereotype)* GREATER_THAN GREATER_THAN
;
stereotype:                                     qualifiedName DOT identifier
;
taggedValues:                                   BRACE_OPEN taggedValue (COMMA taggedValue)* BRACE_CLOSE
;
taggedValue:                                    qualifiedName DOT identifier EQUAL STRING
;


// -------------------------------------- CLASS --------------------------------------

classDefinition:                                CLASS stereotypes? taggedValues? qualifiedName typeParametersWithContravarianceAndMultiplicityParameters?
                                                (
                                                    (PROJECTS projection)
                                                    |
                                                    (
                                                        (EXTENDS type (COMMA type)*)?
                                                        constraints?
                                                        classBody
                                                    )
                                                )
;
classBody:                                      BRACE_OPEN
                                                    properties
                                                BRACE_CLOSE
;
properties:                                     (property | qualifiedProperty)*
;
property:                                       stereotypes? taggedValues? aggregation? identifier COLON propertyReturnType defaultValue? SEMI_COLON
;
qualifiedProperty:                              stereotypes? taggedValues? identifier qualifiedPropertyBody COLON propertyReturnType  SEMI_COLON
;
qualifiedPropertyBody:                          PAREN_OPEN (functionVariableExpression (COMMA functionVariableExpression)*)? PAREN_CLOSE
                                                    BRACE_OPEN codeBlock BRACE_CLOSE
;
aggregation:                                    PAREN_OPEN aggregationType PAREN_CLOSE
;
aggregationType:                                AGGREGATION_TYPE_COMPOSITE | AGGREGATION_TYPE_SHARED | AGGREGATION_TYPE_NONE
;

defaultValue: EQUAL defaultValueExpression
;

defaultValueExpression: (instanceReference)(propertyExpression) | expressionInstance | instanceLiteralToken | defaultValueExpressionsArray
;

defaultValueExpressionsArray: BRACKET_OPEN ( defaultValueExpression (COMMA defaultValueExpression)* )? BRACKET_CLOSE
;


// -------------------------------------- ASSOCIATION --------------------------------------

association:                                    ASSOCIATION stereotypes? taggedValues? qualifiedName
                                                    (associationProjection | associationBody)
;
associationBody:                                BRACE_OPEN properties BRACE_CLOSE
;
associationProjection:                          PROJECTS qualifiedName LESS_THAN qualifiedName COMMA qualifiedName GREATER_THAN
;


// -------------------------------------- PROFILE --------------------------------------

profile:                                        PROFILE qualifiedName
                                                    BRACE_OPEN
                                                        (
                                                            stereotypeDefinitions
                                                            | tagDefinitions
                                                        )*
                                                    BRACE_CLOSE
;
stereotypeDefinitions:                          (STEREOTYPES COLON BRACKET_OPEN (identifier (COMMA identifier)*)? BRACKET_CLOSE SEMI_COLON)
;
tagDefinitions:                                 (TAGS COLON BRACKET_OPEN (identifier (COMMA identifier)*)? BRACKET_CLOSE SEMI_COLON)
;


// -------------------------------------- ENUM --------------------------------------

enumDefinition:                                 ENUM stereotypes? taggedValues? qualifiedName
                                                    BRACE_OPEN
                                                        (enumValue (COMMA enumValue)*)?
                                                    BRACE_CLOSE
;
enumValue:                                      stereotypes? taggedValues? identifier
;


// -------------------------------------- MEASURE --------------------------------------

measureDefinition:                              MEASURE qualifiedName
                                                    measureBody
;
measureBody:                                    BRACE_OPEN
                                                    (
                                                        (measureExpr* canonicalExpr measureExpr*)
                                                        | nonConvertibleMeasureExpr+
                                                    )
                                                BRACE_CLOSE
;
canonicalExpr:                                  STAR measureExpr
;
measureExpr:                                    qualifiedName COLON unitExpr
;
nonConvertibleMeasureExpr:                      qualifiedName SEMI_COLON
;
unitExpr:                                       identifier ARROW codeBlock
;


// -------------------------------------- FUNCTION --------------------------------------

nativeFunction:                                 NATIVE FUNCTION qualifiedName typeAndMultiplicityParameters? functionTypeSignature SEMI_COLON
;
functionTypeSignature:                          PAREN_OPEN (functionVariableExpression (COMMA functionVariableExpression)*)? PAREN_CLOSE COLON type multiplicity
;
functionDefinition:                             FUNCTION stereotypes? taggedValues? qualifiedName typeAndMultiplicityParameters? functionTypeSignature
                                                constraints?
                                                    BRACE_OPEN
                                                        codeBlock
                                                    BRACE_CLOSE
                                                functionTestSuiteDef?
;
functionTestSuiteDef:                           BRACE_OPEN
                                                    (simpleFunctionTest | simpleFunctionSuite | functionData)*
                                                BRACE_CLOSE
;
simpleFunctionSuite:                            identifier
                                                PAREN_OPEN
                                                    (functionData)*
                                                    simpleFunctionTest (simpleFunctionTest)*
                                                PAREN_CLOSE
;
functionData:                                   storeProviderPointer COLON functionDataValue SEMI_COLON
;
storeProviderPointer:                           (storeProviderPointerType)? packageableElementPointer
;
storeProviderPointerType:                       PAREN_OPEN VALID_STRING PAREN_CLOSE
;
packageableElementPointer:                      qualifiedName
;
functionDataValue:                              (qualifiedName | externalFormatValue | embeddedData)
;
simpleFunctionTest:                             identifier (STRING)? PIPE identifier PAREN_OPEN functionParams PAREN_CLOSE EQUAL GREATER_THAN (externalFormatValue | primitiveValue) SEMI_COLON
;
externalFormatValue:                            contentType STRING
;
contentType:                                    PAREN_OPEN identifier PAREN_CLOSE
;
functionParams:                                 (primitiveValue (COMMA primitiveValue)*)?
;
embeddedData:                                   identifier ISLAND_OPEN (embeddedDataContent)*
;
embeddedDataContent:                            ISLAND_START | ISLAND_BRACE_OPEN | ISLAND_CONTENT | ISLAND_HASH | ISLAND_BRACE_CLOSE | ISLAND_END
;

// -------------------------------------- CONSTRAINT --------------------------------------

constraints:                                    BRACKET_OPEN
                                                    constraint (COMMA constraint)*
                                                BRACKET_CLOSE
;
constraint:                                     simpleConstraint | complexConstraint
;
simpleConstraint:                               constraintId? combinedExpression
;
complexConstraint:                              identifier
                                                    PAREN_OPEN
                                                        constraintOwner?
                                                        constraintExternalId?
                                                        constraintFunction
                                                        constraintEnforcementLevel?
                                                        constraintMessage?
                                                    PAREN_CLOSE
;
constraintOwner:                                CONSTRAINT_OWNER COLON identifier
;
constraintExternalId:                           CONSTRAINT_EXTERNAL_ID COLON STRING
;
constraintFunction:                             CONSTRAINT_FUNCTION COLON combinedExpression
;
constraintEnforcementLevel:                     CONSTRAINT_ENFORCEMENT COLON constraintEnforcementLevelType
;
constraintEnforcementLevelType:                 CONSTRAINT_ENFORCEMENT_LEVEL_ERROR | CONSTRAINT_ENFORCEMENT_LEVEL_WARN
;
constraintMessage:                              CONSTRAINT_MESSAGE COLON combinedExpression
;
constraintId:                                   identifier COLON
;


// -------------------------------------- PROJECTION --------------------------------------

projection:                                     dsl | treePath
;
treePath:                                       type alias? stereotypes? taggedValues? treePathClassBody
;
treePathClassBody:                              BRACE_OPEN
                                                    simplePropertyFilter?
                                                    (derivedProperty | complexProperty)*
                                                BRACE_CLOSE
;
alias:                                          AS identifier
;
simplePropertyFilter:                           STAR | ((PLUS | MINUS) (BRACKET_OPEN simpleProperty (COMMA simpleProperty)* BRACKET_CLOSE))
;
simpleProperty:                                 propertyRef stereotypes? taggedValues?
;
complexProperty:                                propertyRef alias? stereotypes? taggedValues? treePathClassBody?
;
derivedProperty:                                GREATER_THAN propertyRef BRACKET_OPEN codeBlock BRACKET_CLOSE alias? stereotypes? taggedValues? treePathClassBody?
;
propertyRef:                                    identifier (PAREN_OPEN (treePathPropertyParameterType (COMMA treePathPropertyParameterType)*)? PAREN_CLOSE)*
;
treePathPropertyParameterType:                  type multiplicity
;
