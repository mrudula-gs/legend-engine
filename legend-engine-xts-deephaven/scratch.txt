package com.gs.alloy.lakehouse.runtime.model.grammar.parser;

import com.gs.alloy.lakehouse.ingest.api.accessor.protocol.IngestRelationAccessor;
import com.gs.alloy.lakehouse.protocol.pure.v1.model.packageableElement.mapping.IngestRelationColumn;
import com.gs.alloy.lakehouse.protocol.pure.v1.model.packageableElement.mapping.LakehouseClassMapping;
import com.gs.alloy.lakehouse.protocol.pure.v1.model.packageableElement.mapping.LakehousePropertyMapping;
import com.gs.alloy.lakehouse.runtime.grammar.antlr4.LakehouseMappingParserGrammar;
import org.antlr.v4.runtime.CharStream;
import org.eclipse.collections.api.factory.Lists;
import org.eclipse.collections.impl.utility.ListIterate;
import org.finos.legend.engine.language.pure.grammar.from.ParseTreeWalkerSourceInformation;
import org.finos.legend.engine.language.pure.grammar.from.PureGrammarParserContext;
import org.finos.legend.engine.language.pure.grammar.from.PureGrammarParserUtility;
import org.finos.legend.engine.language.pure.grammar.from.antlr4.mapping.MappingParserGrammar;
import org.finos.legend.engine.protocol.pure.v1.model.context.EngineErrorType;
import org.finos.legend.engine.protocol.pure.v1.model.packageableElement.mapping.PropertyPointer;
import org.finos.legend.engine.protocol.pure.v1.model.packageableElement.store.relational.model.operation.DynaFunc;
import org.finos.legend.engine.protocol.pure.v1.model.packageableElement.store.relational.model.operation.ElementWithJoins;
import org.finos.legend.engine.protocol.pure.v1.model.packageableElement.store.relational.model.operation.JoinPointer;
import org.finos.legend.engine.protocol.pure.v1.model.packageableElement.store.relational.model.operation.Literal;
import org.finos.legend.engine.protocol.pure.v1.model.packageableElement.store.relational.model.operation.RelationalOperationElement;
import org.finos.legend.engine.shared.core.operational.errorManagement.EngineException;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class LakehouseClassMappingParseTreeWalker
{
    private final CharStream input;
    private final ParseTreeWalkerSourceInformation walkerSourceInformation;
    private final PureGrammarParserContext parserContext;

    public LakehouseClassMappingParseTreeWalker(ParseTreeWalkerSourceInformation walkerSourceInformation, CharStream input, PureGrammarParserContext parserContext)
    {
        this.input = input;
        this.walkerSourceInformation = walkerSourceInformation;
        this.parserContext = parserContext;
    }

    private String visitDatabasePointer(LakehouseMappingParserGrammar.DatabasePointerContext ctx)
    {
        return ctx != null ? PureGrammarParserUtility.fromQualifiedName(ctx.qualifiedName().packagePath() == null ? Collections.emptyList() : ctx.qualifiedName().packagePath().identifier(), ctx.qualifiedName().identifier()) : null;
    }

    private String visitMappingScopeInfo(LakehouseMappingParserGrammar.MappingScopeInfoContext ctx)
    {
        return ctx != null ? PureGrammarParserUtility.fromIdentifier(ctx.unquotedIdentifier()) : null;
    }

    public void visitLakehouseClassMapping(LakehouseMappingParserGrammar.LakehouseClassMappingContext ctx, MappingParserGrammar.MappingElementContext classMappingContext, LakehouseClassMapping lakehouseClassMapping)
    {
        if (ctx.ingestSrc() != null)
        {
            IngestRelationAccessor tmp = new IngestRelationAccessor();
            tmp.path = Lists.mutable.with(visitDatabasePointer(ctx.ingestSrc().databasePointer()), ctx.ingestSrc().qualifiedName().getText());
            tmp.sourceInformation = this.walkerSourceInformation.getSourceInformation(ctx.ingestSrc());
            lakehouseClassMapping.ingestPtr = tmp;
        }
        else if (ctx.accessPointSrc() != null)
        {
            IngestRelationAccessor tmp = new IngestRelationAccessor();
            tmp.path = Lists.mutable.with(visitDatabasePointer(ctx.accessPointSrc().databasePointer()), ctx.accessPointSrc().qualifiedName().getText());
            tmp.sourceInformation = this.walkerSourceInformation.getSourceInformation(ctx.accessPointSrc());
            lakehouseClassMapping.ingestPtr = tmp;
        }
        lakehouseClassMapping.propertyMappings = ListIterate.collect(ctx.propertyMapping(), propertyMappingContext -> visitPropertyMapping(propertyMappingContext, classMappingContext, lakehouseClassMapping));
    }

    private LakehousePropertyMapping visitPropertyMapping(LakehouseMappingParserGrammar.PropertyMappingContext ctx, MappingParserGrammar.MappingElementContext classMappingContext, LakehouseClassMapping lakehouseClassMapping)
    {
        LakehousePropertyMapping propertyMapping = new LakehousePropertyMapping();
        propertyMapping.sourceInformation = this.walkerSourceInformation.getSourceInformation(ctx);
        PropertyPointer propertyPointer = new PropertyPointer();
        propertyPointer.property = PureGrammarParserUtility.fromIdentifier(ctx.qualifiedName());
        propertyPointer._class = lakehouseClassMapping._class;
        propertyPointer.sourceInformation = this.walkerSourceInformation.getSourceInformation(ctx.qualifiedName());
        propertyMapping.property = propertyPointer;
        propertyMapping.source = lakehouseClassMapping.id;
        propertyMapping.relationalOperation = visitOperation(ctx.operation(), lakehouseClassMapping.ingestPtr);
        return propertyMapping;
    }

    private RelationalOperationElement visitOperation(LakehouseMappingParserGrammar.OperationContext ctx, IngestRelationAccessor ingestPtr)
    {
        if (ctx.booleanOperation() != null)
        {
            return visitBooleanOperation(ctx.booleanOperation(), ingestPtr);
        }
        else if (ctx.joinOperation() != null)
        {
            return visitJoinOperation(ctx.joinOperation(), ingestPtr);
        }
        throw new EngineException("Unsupported operation syntax", this.walkerSourceInformation.getSourceInformation(ctx), EngineErrorType.PARSER);
    }

    private RelationalOperationElement visitBooleanOperation(LakehouseMappingParserGrammar.BooleanOperationContext ctx, IngestRelationAccessor ingestPtr)
    {
        RelationalOperationElement operationElement = visitAtomicOperation(ctx.atomicOperation(), ingestPtr);
        if (ctx.booleanOperationRight() != null)
        {
            DynaFunc operation = new DynaFunc();
            operation.sourceInformation = this.walkerSourceInformation.getSourceInformation(ctx);
            operation.funcName = ctx.booleanOperationRight().booleanOperator().AND() != null ? "and" : "or";
            operation.parameters = new ArrayList<>();
            operation.parameters.add(operationElement);
            RelationalOperationElement right = visitOperation(ctx.booleanOperationRight().operation(), ingestPtr);
            operation.parameters.add(right);
            return operation;
        }
        return operationElement;
    }

    private RelationalOperationElement visitAtomicOperation(LakehouseMappingParserGrammar.AtomicOperationContext ctx, IngestRelationAccessor ingestPtr)
    {
        RelationalOperationElement operationElement;
        if (ctx.groupOperation() != null)
        {
            DynaFunc operation = new DynaFunc();
            operation.sourceInformation = this.walkerSourceInformation.getSourceInformation(ctx);
            operation.funcName = "group";
            operation.parameters = new ArrayList<>();
            operation.parameters.add(visitOperation(ctx.groupOperation().operation(), ingestPtr));
            operationElement = operation;
        }
        else if (ctx.functionOperation() != null)
        {
            DynaFunc operation = new DynaFunc();
            operation.sourceInformation = this.walkerSourceInformation.getSourceInformation(ctx);
            operation.funcName = PureGrammarParserUtility.fromIdentifier(ctx.functionOperation().identifier());
            operation.parameters = ListIterate.collect(ctx.functionOperation().functionOperationArgument(), argCtx -> visitFunctionOperationArgument(argCtx, ingestPtr));
            operationElement = operation;
        }
        else if (ctx.columnOperation() != null)
        {
            operationElement = visitColumnOperation(ctx.columnOperation(), ingestPtr);
        }
        else if (ctx.constant() != null)
        {
            Literal constant = new Literal();
            constant.sourceInformation = this.walkerSourceInformation.getSourceInformation(ctx);
            if (ctx.constant().STRING() != null)
            {
                constant.value = PureGrammarParserUtility.fromGrammarString(ctx.constant().STRING().getText(), true);
            }
            else if (ctx.constant().INTEGER() != null)
            {
                constant.value = Integer.parseInt(ctx.constant().INTEGER().getText());
            }
            else if (ctx.constant().FLOAT() != null)
            {
                constant.value = Double.parseDouble(ctx.constant().FLOAT().getText());
            }
            else
            {
                throw new EngineException("Unsupported constant syntax", this.walkerSourceInformation.getSourceInformation(ctx), EngineErrorType.PARSER);
            }
            operationElement = constant;
        }
        else if (ctx.joinOperation() != null)
        {
            operationElement = visitJoinOperation(ctx.joinOperation(), ingestPtr);
        }
        else
        {
            throw new EngineException("Unsupported atomic operation syntax", this.walkerSourceInformation.getSourceInformation(ctx), EngineErrorType.PARSER);
        }

        if (ctx.atomicOperationRight() != null)
        {
            DynaFunc operation = new DynaFunc();
            operation.sourceInformation = this.walkerSourceInformation.getSourceInformation(ctx);
            operation.parameters = new ArrayList<>();
            operation.parameters.add(operationElement);
            if (ctx.atomicOperationRight().atomicOperator() != null)
            {
                operation.funcName = visitAtomicOperator(ctx.atomicOperationRight().atomicOperator());
                operation.parameters.add(visitAtomicOperation(ctx.atomicOperationRight().atomicOperation(), ingestPtr));
            }
            else if (ctx.atomicOperationRight().atomicSelfOperator() != null)
            {
                operation.funcName = visitAtomicSelfOperator(ctx.atomicOperationRight().atomicSelfOperator());
            }
            else
            {
                throw new EngineException("Unsupported atomic operation right syntax", this.walkerSourceInformation.getSourceInformation(ctx), EngineErrorType.PARSER);
            }
            operationElement = operation;
        }
        return operationElement;
    }

    private String visitAtomicOperator(LakehouseMappingParserGrammar.AtomicOperatorContext ctx)
    {
        if (ctx.EQUAL() != null) return "equal";
        if (ctx.GREATER_THAN() != null) return "greaterThan";
        if (ctx.LESS_THAN() != null) return "lessThan";
        if (ctx.GREATER_OR_EQUAL() != null) return "greaterThanEqual";
        if (ctx.LESS_OR_EQUAL() != null) return "lessThanEqual";
        if (ctx.TEST_NOT_EQUAL() != null || ctx.NOT_EQUAL() != null) return "notEqual";
        throw new EngineException("Unsupported operator", this.walkerSourceInformation.getSourceInformation(ctx), EngineErrorType.PARSER);
    }

    private String visitAtomicSelfOperator(LakehouseMappingParserGrammar.AtomicSelfOperatorContext ctx)
    {
        if (ctx.IS_NULL() != null) return "isNull";
        if (ctx.IS_NOT_NULL() != null) return "isNotNull";
        throw new EngineException("Unsupported self operator", this.walkerSourceInformation.getSourceInformation(ctx), EngineErrorType.PARSER);
    }

    private RelationalOperationElement visitFunctionOperationArgument(LakehouseMappingParserGrammar.FunctionOperationArgumentContext ctx, IngestRelationAccessor ingestPtr)
    {
        if (ctx.operation() != null)
        {
            return visitOperation(ctx.operation(), ingestPtr);
        }
        else if (ctx.functionOperationArgumentArray() != null)
        {
            throw new EngineException("Array arguments are not supported in Lakehouse mappings", this.walkerSourceInformation.getSourceInformation(ctx), EngineErrorType.PARSER);
        }
        throw new EngineException("Unsupported function argument syntax", this.walkerSourceInformation.getSourceInformation(ctx), EngineErrorType.PARSER);
    }

    private RelationalOperationElement visitColumnOperation(LakehouseMappingParserGrammar.ColumnOperationContext ctx, IngestRelationAccessor ingestPtr)
    {
        String database = ctx.databasePointer() != null ? visitDatabasePointer(ctx.databasePointer()) : (ingestPtr != null ? ingestPtr.path.get(0) : null);
        if (ctx.tableAliasColumnOperation().tableAliasColumnOperationWithTarget() != null)
        {
            return visitTableAliasColumnOperationWithTarget(ctx.tableAliasColumnOperation().tableAliasColumnOperationWithTarget(), ingestPtr);
        }
        else if (ctx.tableAliasColumnOperation().tableAliasColumnOperationWithScopeInfo() != null)
        {
            return visitTableAliasColumnOperationWithScopeInfo(ctx.tableAliasColumnOperation().tableAliasColumnOperationWithScopeInfo(), ingestPtr);
        }
        throw new EngineException("Unsupported column operation syntax", this.walkerSourceInformation.getSourceInformation(ctx), EngineErrorType.PARSER);
    }

    private RelationalOperationElement visitTableAliasColumnOperationWithTarget(LakehouseMappingParserGrammar.TableAliasColumnOperationWithTargetContext ctx, IngestRelationAccessor ingestPtr)
    {
        IngestRelationColumn column = new IngestRelationColumn();
        column.sourceInformation = this.walkerSourceInformation.getSourceInformation(ctx);
        column.ingestAccessor = new IngestRelationAccessor();
        column.ingestAccessor.sourceInformation = this.walkerSourceInformation.getSourceInformation(ctx);
        String databasePath = ingestPtr != null ? ingestPtr.path.get(0) : null;
        String tableName = ctx.TARGET() != null ? ctx.TARGET().getText() : null;
        if (tableName == null)
        {
            throw new EngineException("Table name (TARGET) is required in column operation", this.walkerSourceInformation.getSourceInformation(ctx), EngineErrorType.PARSER);
        }
        column.ingestAccessor.path = Lists.mutable.with(databasePath, tableName);
        column.column = ctx.relationalIdentifier().QUOTED_STRING() != null
                ? PureGrammarParserUtility.fromGrammarString(ctx.relationalIdentifier().QUOTED_STRING().getText(), true)
                : PureGrammarParserUtility.fromIdentifier(ctx.relationalIdentifier().unquotedIdentifier());
        return column;
    }

    private RelationalOperationElement visitTableAliasColumnOperationWithScopeInfo(LakehouseMappingParserGrammar.TableAliasColumnOperationWithScopeInfoContext ctx, IngestRelationAccessor ingestPtr)
    {
        IngestRelationColumn column = new IngestRelationColumn();
        column.sourceInformation = this.walkerSourceInformation.getSourceInformation(ctx);
        column.ingestAccessor = new IngestRelationAccessor();
        column.ingestAccessor.sourceInformation = this.walkerSourceInformation.getSourceInformation(ctx);
        String databasePath = ingestPtr != null ? ingestPtr.path.get(0) : null;
        String tableName = ctx.relationalIdentifier().QUOTED_STRING() != null
                ? PureGrammarParserUtility.fromGrammarString(ctx.relationalIdentifier().QUOTED_STRING().getText(), true)
                : PureGrammarParserUtility.fromIdentifier(ctx.relationalIdentifier().unquotedIdentifier());
        column.ingestAccessor.path = Lists.mutable.with(databasePath, tableName);
        if (ctx.scopeInfo() != null && ctx.scopeInfo().relationalIdentifier().size() > 0)
        {
            column.column = ctx.scopeInfo().relationalIdentifier(0).QUOTED_STRING() != null
                    ? PureGrammarParserUtility.fromGrammarString(ctx.scopeInfo().relationalIdentifier(0).QUOTED_STRING().getText(), true)
                    : PureGrammarParserUtility.fromIdentifier(ctx.scopeInfo().relationalIdentifier(0).unquotedIdentifier());
        }
        else
        {
            throw new EngineException("Column name is required in scopeInfo", this.walkerSourceInformation.getSourceInformation(ctx), EngineErrorType.PARSER);
        }
        return column;
    }

    private RelationalOperationElement visitJoinOperation(LakehouseMappingParserGrammar.JoinOperationContext ctx, IngestRelationAccessor ingestPtr)
    {
        ElementWithJoins operation = new ElementWithJoins();
        operation.sourceInformation = this.walkerSourceInformation.getSourceInformation(ctx);
        operation.joins = new ArrayList<>();

        // Parse source relation: [test::ingest::PersonIngest]Person
        String sourceDb = ctx.databasePointer(0) != null ? visitDatabasePointer(ctx.databasePointer(0)) : (ingestPtr != null ? ingestPtr.path.get(0) : null);
        String sourceTable = PureGrammarParserUtility.fromIdentifier(ctx.identifier(0));
        IngestRelationAccessor sourceAccessor = new IngestRelationAccessor();
        sourceAccessor.sourceInformation = this.walkerSourceInformation.getSourceInformation(ctx.databasePointer(0));
        sourceAccessor.path = Lists.mutable.with(sourceDb, sourceTable);

        // Parse target relation: [test::ingest::FirmIngest]Firm
        String targetDb = ctx.databasePointer(1) != null ? visitDatabasePointer(ctx.databasePointer(1)) : null;
        String targetTable = PureGrammarParserUtility.fromIdentifier(ctx.identifier(1));
        IngestRelationAccessor targetAccessor = new IngestRelationAccessor();
        targetAccessor.sourceInformation = this.walkerSourceInformation.getSourceInformation(ctx.databasePointer(1));
        targetAccessor.path = Lists.mutable.with(targetDb, targetTable);

        // Create JoinPointer
        JoinPointer joinPointer = new JoinPointer();
        joinPointer.sourceInformation = this.walkerSourceInformation.getSourceInformation(ctx);
        joinPointer.name = "join"; // Default name for the join
        joinPointer.joinType = PureGrammarParserUtility.fromQualifiedName(ctx.qualifiedName().packagePath() == null ? Collections.emptyList() : ctx.qualifiedName().packagePath().identifier(), ctx.qualifiedName().identifier());
        joinPointer.db = targetDb;
        operation.joins.add(joinPointer);

        // Parse join condition: {x,y|$x.firm_id == $y.firm_id}
        if (ctx.functionOperation() != null)
        {
            DynaFunc joinCondition = new DynaFunc();
            joinCondition.sourceInformation = this.walkerSourceInformation.getSourceInformation(ctx.functionOperation());
            joinCondition.funcName = "lambda";
            joinCondition.parameters = new ArrayList<>();
            // Pass source and target accessors for lambda parameters
            for (int i = 0; i < ctx.functionOperation().functionOperationArgument().size(); i++)
            {
                LakehouseMappingParserGrammar.FunctionOperationArgumentContext argCtx = ctx.functionOperation().functionOperationArgument(i);
                IngestRelationAccessor argAccessor = i == 0 ? sourceAccessor : targetAccessor;
                joinCondition.parameters.add(visitFunctionOperationArgument(argCtx, argAccessor));
            }
            operation.relationalElement = joinCondition;
        }

        // Parse projection: [test::ingest::FirmIngest]Firm.id
        if (ctx.tableAliasColumnOperation() != null)
        {
            operation.relationalElement = visitTableAliasColumnOperation(ctx.tableAliasColumnOperation(), targetDb, targetAccessor);
        }

        return operation;
    }

    private RelationalOperationElement visitTableAliasColumnOperation(LakehouseMappingParserGrammar.TableAliasColumnOperationContext ctx, String database, IngestRelationAccessor ingestPtr)
    {
        if (ctx.tableAliasColumnOperationWithTarget() != null)
        {
            return visitTableAliasColumnOperationWithTarget(ctx.tableAliasColumnOperation().tableAliasColumnOperationWithTarget(), ingestPtr);
        }
        else if (ctx.tableAliasColumnOperation().tableAliasColumnOperationWithScopeInfo() != null)
        {
            return visitTableAliasColumnOperationWithScopeInfo(ctx.tableAliasColumnOperation().tableAliasColumnOperationWithScopeInfo(), ingestPtr);
        }
        throw new EngineException("Unsupported column operation syntax", this.walkerSourceInformation.getSourceInformation(ctx), EngineErrorType.PARSER);
    }
}
