private static String renderRelationalPropertyMapping(PropertyMapping relationalPropertyMapping, Boolean renderSourceId)
{
    LakehousePropertyMapping lakehousePropertyMapping = (LakehousePropertyMapping) relationalPropertyMapping;
    String propertyString = getTabString(2) + (relationalPropertyMapping.localMappingProperty != null
            ? ("+" + PureGrammarComposerUtility.convertIdentifier(relationalPropertyMapping.property.property) + ": " +
            relationalPropertyMapping.localMappingProperty.type + "[" +
            HelperDomainGrammarComposer.renderMultiplicity(relationalPropertyMapping.localMappingProperty.multiplicity) + "]")
            : PureGrammarComposerUtility.convertIdentifier(relationalPropertyMapping.property.property) +
            (checkNullOrEmpty(relationalPropertyMapping.target) ? "" : "[" + (renderSourceId ?
                    (checkNullOrEmpty(relationalPropertyMapping.source) ? "" : (relationalPropertyMapping.source + ",")) : "") +
                    relationalPropertyMapping.target + "]")
    ) + ": ";
    return propertyString + renderRelationalOperationElement(lakehousePropertyMapping.relationalOperation);
}

private static String renderRelationalOperationElement(RelationalOperationElement operation)
{
    if (operation instanceof DynaFunc)
    {
        DynaFunc func = (DynaFunc) operation;
        StringBuilder builder = new StringBuilder();
        builder.append(PureGrammarComposerUtility.convertIdentifier(func.funcName));
        builder.append("(");
        builder.append(ListIterate.collect(func.parameters, LakehouseClassMappingParseTreeWalker::renderRelationalOperationElement).makeString(", "));
        builder.append(")");
        return builder.toString();
    }
    else if (operation instanceof IngestRelationColumn)
    {
        IngestRelationColumn column = (IngestRelationColumn) operation;
        return "[" + column.ingestAccessor.path.get(0) + "]" + column.ingestAccessor.path.get(1) + "." + column.Column;
    }
    else if (operation instanceof Literal)
    {
        Literal literal = (Literal) operation;
        if (literal.value instanceof String)
        {
            return PureGrammarComposerUtility.convertString((String) literal.value, true);
        }
        return literal.value.toString();
    }
    throw new IllegalStateException("Unsupported operation type: " + operation.getClass().getSimpleName());
}
