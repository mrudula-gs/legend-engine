private static String renderRelationalOperationElement(RelationalOperationElement operation)
{
    if (operation instanceof DynaFunc)
    {
        DynaFunc func = (DynaFunc) operation;

        // Special handling for lambda functions
        if ("lambda".equals(func.funcName))
        {
            return renderLambdaFunction(func);
        }
        
        // Special handling for comparison operators in lambda context
        if (("equal".equals(func.funcName) || "notEqual".equals(func.funcName)) && func.parameters.size() == 2)
        {
            // Check if we're in a lambda context by examining the parameters
            RelationalOperationElement left = func.parameters.get(0);
            RelationalOperationElement right = func.parameters.get(1);
            
            // If either parameter is a column reference from a lambda parameter, use special rendering
            if (isLambdaParameterColumn(left) || isLambdaParameterColumn(right))
            {
                String leftStr = renderLambdaOperand(left);
                String rightStr = renderLambdaOperand(right);
                String operator = "equal".equals(func.funcName) ? " == " : " != ";
                return leftStr + operator + rightStr;
            }
        }
        
        StringBuilder builder = new StringBuilder();
        builder.append(PureGrammarComposerUtility.convertIdentifier(func.funcName));
        builder.append("(");
        builder.append(ListIterate.collect(func.parameters, param -> renderRelationalOperationElement(param)).makeString(", "));
        builder.append(")");
        return builder.toString();
    }
    else if (operation instanceof IngestRelationColumn)
    {
        IngestRelationColumn column = (IngestRelationColumn) operation;
        StringBuilder builder = new StringBuilder();
        if (column.ingestAccessor != null && !column.ingestAccessor.path.isEmpty())
        {
            builder.append("[").append(column.ingestAccessor.path.get(0)).append("]").append(column.ingestAccessor.path.get(1));
        }
        if (column.column != null)
        {
            builder.append(".").append(column.column);
        }
        return builder.toString();
    }
    else if (operation instanceof Literal)
    {
        Literal literal = (Literal) operation;
        if (literal.value instanceof String)
        {
            return PureGrammarComposerUtility.convertString((String) literal.value, true);
        }
        return literal.value.toString();
    }
    else if (operation instanceof ElementWithLakeJoins)
    {
        ElementWithLakeJoins join = (ElementWithLakeJoins) operation;
        StringBuilder builder = new StringBuilder();

        // Serialize source1
        if (join.source1 != null && !join.source1.path.isEmpty())
        {
            builder.append("[").append(join.source1.path.get(0)).append("]").append(join.source1.path.get(1));
        }
        // Serialize join function
        builder.append("->join(");
        // Serialize source2
        if (join.source2 != null && !join.source2.path.isEmpty())
        {
            builder.append("[").append(join.source2.path.get(0)).append("]").append(join.source2.path.get(1));
        }
        // Serialize joinType
        if (join.joinType != null)
        {
            builder.append(", ").append(join.joinType);
        }
        // Serialize condition as lambda syntax
        if (join.condition != null && join.conditionParametersNames != null && !join.conditionParametersNames.isEmpty())
        {
            builder.append(", {");
            builder.append(String.join(", ", join.conditionParametersNames));
            builder.append("|");
            builder.append(renderLambdaBody(join.condition, join.conditionParametersNames, join.source1, join.source2));
            builder.append("}");
        }
        builder.append(")");
        // Serialize projection
        if (join.relationalElement != null)
        {
            builder.append(" | ").append(renderRelationalOperationElement(join.relationalElement));
        }
        return builder.toString();
    }
    throw new IllegalStateException("Unsupported operation type: " + operation.getClass().getSimpleName());
}

// Helper method to check if a column is from a lambda parameter
private static boolean isLambdaParameterColumn(RelationalOperationElement operation)
{
    if (!(operation instanceof IngestRelationColumn))
    {
        return false;
    }
    IngestRelationColumn column = (IngestRelationColumn) operation;
    // Lambda parameter columns typically have both accessor path and column name
    return column.ingestAccessor != null && column.column != null;
}

// Helper method to render lambda operands with proper parameter syntax
private static String renderLambdaOperand(RelationalOperationElement operation)
{
    if (operation instanceof IngestRelationColumn)
    {
        IngestRelationColumn column = (IngestRelationColumn) operation;
        // This will be called within a lambda context, need to determine which parameter
        // This is a simplified version - you may need to pass context to determine x vs y
        return "$x." + column.column; // You'll need to determine x vs y based on context
    }
    return renderRelationalOperationElement(operation);
}

// Updated renderLambdaBody to handle parameter names and sources
private static String renderLambdaBody(DynaFunc condition, List<String> paramNames, 
                                       IngestRelationAccessor source1, IngestRelationAccessor source2)
{
    if ("equal".equals(condition.funcName) && condition.parameters.size() == 2)
    {
        String left = renderLambdaOperandWithContext(condition.parameters.get(0), paramNames, source1, source2);
        String right = renderLambdaOperandWithContext(condition.parameters.get(1), paramNames, source1, source2);
        return left + " == " + right;
    }
    else if ("notEqual".equals(condition.funcName) && condition.parameters.size() == 2)
    {
        String left = renderLambdaOperandWithContext(condition.parameters.get(0), paramNames, source1, source2);
        String right = renderLambdaOperandWithContext(condition.parameters.get(1), paramNames, source1, source2);
        return left + " != " + right;
    }
    else if ("and".equals(condition.funcName) && condition.parameters.size() == 2)
    {
        String left = renderLambdaBody((DynaFunc) condition.parameters.get(0), paramNames, source1, source2);
        String right = renderLambdaBody((DynaFunc) condition.parameters.get(1), paramNames, source1, source2);
        return left + " && " + right;
    }
    else if ("or".equals(condition.funcName) && condition.parameters.size() == 2)
    {
        String left = renderLambdaBody((DynaFunc) condition.parameters.get(0), paramNames, source1, source2);
        String right = renderLambdaBody((DynaFunc) condition.parameters.get(1), paramNames, source1, source2);
        return left + " || " + right;
    }

    // Fallback to function syntax for complex conditions
    return renderRelationalOperationElement(condition);
}

// New helper method to render lambda operands with proper context
private static String renderLambdaOperandWithContext(RelationalOperationElement operation, 
                                                     List<String> paramNames, 
                                                     IngestRelationAccessor source1, 
                                                     IngestRelationAccessor source2)
{
    if (operation instanceof IngestRelationColumn)
    {
        IngestRelationColumn column = (IngestRelationColumn) operation;
        if (column.ingestAccessor != null && column.column != null)
        {
            // Determine which parameter this column belongs to
            String paramName = null;
            if (source1 != null && column.ingestAccessor.path.equals(source1.path))
            {
                paramName = paramNames.get(0); // First param (usually 'x')
            }
            else if (source2 != null && column.ingestAccessor.path.equals(source2.path))
            {
                paramName = paramNames.get(1); // Second param (usually 'y')
            }
            
            if (paramName != null)
            {
                return "$" + paramName + "." + column.column;
            }
        }
        // Fallback to full path if not a lambda parameter
        return renderRelationalOperationElement(operation);
    }
    else if (operation instanceof Literal)
    {
        return renderRelationalOperationElement(operation);
    }
    else if (operation instanceof DynaFunc)
    {
        // Handle nested functions within lambda
        return renderLambdaBody((DynaFunc) operation, paramNames, source1, source2);
    }
    return renderRelationalOperationElement(operation);
}
