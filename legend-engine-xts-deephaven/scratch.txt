// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package com.gs.alloy.lakehouse.runtime.model.grammar.compiler;

import com.gs.alloy.lakehouse.ingest.api.accessor.protocol.IngestRelationAccessor;
import com.gs.alloy.lakehouse.protocol.pure.v1.model.packageableElement.mapping.IngestRelationColumn;
import com.gs.alloy.lakehouse.protocol.pure.v1.model.packageableElement.mapping.LakehouseClassMapping;
import com.gs.alloy.lakehouse.protocol.pure.v1.model.packageableElement.mapping.LakehousePropertyMapping;
import org.eclipse.collections.api.RichIterable;
import org.eclipse.collections.api.block.function.Function3;
import org.eclipse.collections.api.factory.Lists;
import org.eclipse.collections.api.list.MutableList;
import org.eclipse.collections.api.tuple.Pair;
import org.eclipse.collections.impl.list.mutable.FastList;
import org.eclipse.collections.impl.tuple.Tuples;
import org.eclipse.collections.impl.utility.ListIterate;
import org.finos.legend.engine.language.pure.compiler.toPureGraph.CompileContext;
import org.finos.legend.engine.language.pure.compiler.toPureGraph.HelperMappingBuilder;
import org.finos.legend.engine.language.pure.compiler.toPureGraph.HelperModelBuilder;
import org.finos.legend.engine.language.pure.compiler.toPureGraph.SourceInformationHelper;
import org.finos.legend.engine.language.pure.compiler.toPureGraph.extension.CompilerExtension;
import org.finos.legend.engine.language.pure.compiler.toPureGraph.extension.Processor;
import org.finos.legend.engine.protocol.pure.v1.model.context.EngineErrorType;
import org.finos.legend.engine.protocol.pure.v1.model.context.PackageableElementPointer;
import org.finos.legend.engine.protocol.pure.v1.model.context.PackageableElementType;
import org.finos.legend.engine.protocol.pure.v1.model.packageableElement.mapping.ClassMapping;
import org.finos.legend.engine.protocol.pure.v1.model.packageableElement.store.relational.model.operation.DynaFunc;
import org.finos.legend.engine.protocol.pure.v1.model.packageableElement.store.relational.model.operation.Literal;
import org.finos.legend.engine.protocol.pure.v1.model.packageableElement.store.relational.model.operation.RelationalOperationElement;
import org.finos.legend.engine.shared.core.operational.errorManagement.EngineException;
import org.finos.legend.pure.generated.Root_meta_external_ingest_accessor_IngestRelationAccessor;
import org.finos.legend.pure.generated.Root_meta_external_ingest_accessor_IngestRelationAccessor_Impl;
import org.finos.legend.pure.generated.Root_meta_external_ingest_mapping_IngestRelationColumn;
import org.finos.legend.pure.generated.Root_meta_external_ingest_mapping_IngestRelationColumn_Impl;
import org.finos.legend.pure.generated.Root_meta_external_ingest_mapping_LakehousePropertyMapping;
import org.finos.legend.pure.generated.Root_meta_external_ingest_mapping_LakehousePropertyMapping_Impl;
import org.finos.legend.pure.generated.Root_meta_external_ingest_metamodel_pure_LakehouseSetImplementation;
import org.finos.legend.pure.generated.Root_meta_external_ingest_metamodel_pure_LakehouseSetImplementation_Impl;
import org.finos.legend.pure.generated.Root_meta_external_ingest_specification_metamodel_IngestDefinition;
import org.finos.legend.pure.generated.Root_meta_external_ingest_specification_metamodel_dataset_Dataset;
import org.finos.legend.pure.generated.Root_meta_pure_metamodel_function_property_Property_Impl;
import org.finos.legend.pure.generated.Root_meta_pure_metamodel_type_generics_GenericType_Impl;
import org.finos.legend.pure.m3.coreinstance.meta.pure.mapping.EmbeddedSetImplementation;
import org.finos.legend.pure.m3.coreinstance.meta.pure.mapping.Mapping;
import org.finos.legend.pure.m3.coreinstance.meta.pure.mapping.PropertyMapping;
import org.finos.legend.pure.m3.coreinstance.meta.pure.mapping.PropertyMappingsImplementation;
import org.finos.legend.pure.m3.coreinstance.meta.pure.mapping.SetImplementation;
import org.finos.legend.pure.m3.coreinstance.meta.pure.metamodel.PackageableElement;
import org.finos.legend.pure.m3.coreinstance.meta.pure.metamodel.PropertyOwner;
import org.finos.legend.pure.m3.coreinstance.meta.pure.metamodel.function.property.Property;
import org.finos.legend.pure.m3.coreinstance.meta.pure.metamodel.relationship.Association;
import org.finos.legend.pure.m3.coreinstance.meta.pure.metamodel.type.Class;
import org.finos.legend.pure.m3.coreinstance.meta.pure.metamodel.type.generics.GenericType;
import org.finos.legend.pure.m3.navigation.M3Paths;

import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.Set;

public class LakehouseMappingCompilerExtension implements CompilerExtension
{
    @Override
    public MutableList<String> group()
    {
        return Lists.mutable.with("PackageableElement", "Mapping");
    }

    @Override
    public CompilerExtension build()
    {
        return new LakehouseMappingCompilerExtension();
    }

    @Override
    public Iterable<? extends Processor<?>> getExtraProcessors()
    {
        return Lists.immutable.with();
    }

    @Override
    public List<Function3<ClassMapping, Mapping, CompileContext, Pair<SetImplementation, RichIterable<EmbeddedSetImplementation>>>> getExtraClassMappingFirstPassProcessors()
    {
        return Collections.singletonList(
                (cm, parentMapping, context) ->
                {
                    if (cm instanceof LakehouseClassMapping)
                    {
                        LakehouseClassMapping classMapping = (LakehouseClassMapping) cm;
                        String id = classMapping.id != null ? classMapping.id : getElementFullPath(context.resolveClass(classMapping._class, classMapping.classSourceInformation), context.pureModel.getExecutionSupport()).replaceAll("::", "_");
                        Root_meta_external_ingest_metamodel_pure_LakehouseSetImplementation res = new Root_meta_external_ingest_metamodel_pure_LakehouseSetImplementation_Impl(id, SourceInformationHelper.toM3SourceInformation(cm.sourceInformation), context.pureModel.getClass("meta::external::ingest::metamodel::pure::LakehouseSetImplementation"))._id(id);

                        Root_meta_external_ingest_accessor_IngestRelationAccessor tmp = null;
                        if (classMapping.ingestPtr != null)
                        {
                            IngestRelationAccessor accessor = classMapping.ingestPtr;
                            PackageableElement packageableElement = context.resolvePackageableElement(accessor.path.get(0), accessor.sourceInformation);
                            if (!(packageableElement instanceof Root_meta_external_ingest_specification_metamodel_IngestDefinition))
                            {
                                throw new EngineException("Ingest source must be an IngestDefinition", accessor.sourceInformation, EngineErrorType.COMPILATION);
                            }
                            Root_meta_external_ingest_specification_metamodel_IngestDefinition definition = (Root_meta_external_ingest_specification_metamodel_IngestDefinition) packageableElement;
                            Root_meta_external_ingest_specification_metamodel_dataset_Dataset dataset = definition._datasets().detect(c -> accessor.path.get(1).equals(c._name()));
                            if (dataset == null)
                            {
                                throw new EngineException("Dataset '" + accessor.path.get(1) + "' not found in IngestDefinition '" + accessor.path.get(0) + "'", accessor.sourceInformation, EngineErrorType.COMPILATION);
                            }
                            GenericType genericType = new Root_meta_pure_metamodel_type_generics_GenericType_Impl("", null, context.pureModel.getClass(M3Paths.GenericType))
                                    ._rawType(context.pureModel.getType("meta::external::ingest::accessor::IngestRelationAccessor"))
                                    ._typeArguments(FastList.newListWith(
                                            new Root_meta_pure_metamodel_type_generics_GenericType_Impl("", null, context.pureModel.getClass(M3Paths.GenericType))
                                                    ._rawType(dataset._source().relationType(context.pureModel.getExecutionSupport()))
                                    ));
                            tmp = new Root_meta_external_ingest_accessor_IngestRelationAccessor_Impl("")
                                    ._classifierGenericType(genericType)
                                    ._ingestDefinition(definition)
                                    ._dataset(dataset);
                        }
                        res._superSetImplementationId(classMapping.extendsClassMappingId)
                                ._root(classMapping.root)
                                ._ingestPtr(tmp)
                                ._class(context.resolveClass(classMapping._class, classMapping.classSourceInformation))
                                ._propertyMappings(ListIterate.collect(classMapping.propertyMappings, propertyMapping -> processLakehousePropertyMapping(propertyMapping, tmp, context, res, res)))
                                ._parent(parentMapping);
                        if (classMapping.mappingClass != null)
                        {
                            res._mappingClass(HelperMappingBuilder.processMappingClass(classMapping.mappingClass, context, parentMapping));
                        }
                        return Tuples.pair(res, Lists.immutable.empty());
                    }
                    return null;
                }
        );
    }

    private PropertyMapping processLakehousePropertyMapping(LakehousePropertyMapping propertyMapping, Root_meta_external_ingest_accessor_IngestRelationAccessor ra, CompileContext context, Root_meta_external_ingest_metamodel_pure_LakehouseSetImplementation immediateParent,
                                                            Root_meta_external_ingest_metamodel_pure_LakehouseSetImplementation topParent)
    {
        Root_meta_external_ingest_mapping_LakehousePropertyMapping lpm = new Root_meta_external_ingest_mapping_LakehousePropertyMapping_Impl("", SourceInformationHelper.toM3SourceInformation(propertyMapping.sourceInformation), context.pureModel.getClass("meta::external::ingest::mapping::LakehousePropertyMapping"));
        Property property = resolvePropertyForLakehousePropertyMapping(propertyMapping, immediateParent, context);
        lpm._property(property)
                ._localMappingProperty(propertyMapping.localMappingProperty != null)
                ._relationalOperation(processRelationalOperationElement(propertyMapping.relationalOperation, ra, context))
                ._sourceSetImplementationId(getPropertyMappingSourceId(propertyMapping, immediateParent, property, context))
                ._targetSetImplementationId(getPropertyMappingTargetId(propertyMapping, immediateParent, property, context))
                ._owner(immediateParent);
        lpm.setSourceInformation(SourceInformationHelper.toM3SourceInformation(propertyMapping.sourceInformation));
        return lpm;
    }

    private org.finos.legend.pure.m3.coreinstance.meta.pure.metamodel.function.property.Property processRelationalOperationElement(RelationalOperationElement operation, Root_meta_external_ingest_accessor_IngestRelationAccessor ra, CompileContext context)
    {
        if (operation instanceof IngestRelationColumn)
        {
            IngestRelationColumn column = (IngestRelationColumn) operation;
            return new Root_meta_external_ingest_mapping_IngestRelationColumn_Impl("", SourceInformationHelper.toM3SourceInformation(column.sourceInformation), context.pureModel.getClass("meta::external::ingest::mapping::IngestRelationColumn"))
                    ._ingestAccessor(ra)
                    ._Column(column.Column);
        }
        else if (operation instanceof DynaFunc)
        {
            DynaFunc func = (DynaFunc) operation;
            Root_meta_pure_metamodel_function_property_Property_Impl property = new Root_meta_pure_metamodel_function_property_Property_Impl("", SourceInformationHelper.toM3SourceInformation(func.sourceInformation), context.pureModel.getClass("meta::pure::metamodel::function::property::Property"));
            property._name(func.funcName);
            property._parameters(ListIterate.collect(func.parameters, param -> processRelationalOperationElement(param, ra, context)));
            return property;
        }
        else if (operation instanceof Literal)
        {
            Literal literal = (Literal) operation;
            Root_meta_pure_metamodel_function_property_Property_Impl property = new Root_meta_pure_metamodel_function_property_Property_Impl("", SourceInformationHelper.toM3SourceInformation(literal.sourceInformation), context.pureModel.getClass("meta::pure::metamodel::function::property::Property"));
            property._name("literal");
            property._parameters(FastList.newListWith(context.pureModel.getValueSpecification(literal.value, literal.sourceInformation)));
            return property;
        }
        throw new EngineException("Unsupported relational operation type: " + operation.getClass().getSimpleName(), operation.sourceInformation, EngineErrorType.COMPILATION);
    }

    public static String getPropertyMappingSourceId(org.finos.legend.engine.protocol.pure.v1.model.packageableElement.mapping.PropertyMapping propertyMapping, PropertyMappingsImplementation parent, Property<?, ?> property, CompileContext context)
    {
        if (!(propertyMapping instanceof LakehousePropertyMapping))
        {
            throw new UnsupportedOperationException();
        }

        if (propertyMapping.source != null)
        {
            return propertyMapping.source;
        }

        PropertyOwner owner = property._owner();
        if ((parent._id() == null) && (owner instanceof Association))
        {
            Property<?, ?> prop = ((Class<?>) property._genericType()._rawType())._propertiesFromAssociations().detect(p -> owner.equals(p._owner()));
            return HelperModelBuilder.getTypeFullPath(prop._genericType()._rawType(), "_", context.pureModel.getExecutionSupport());
        }
        return parent._id();
    }

    public static String getPropertyMappingTargetId(org.finos.legend.engine.protocol.pure.v1.model.packageableElement.mapping.PropertyMapping propertyMapping, PropertyMappingsImplementation parent, Property<?, ?> property, CompileContext context)
    {
        if (!(propertyMapping instanceof LakehousePropertyMapping))
        {
            throw new UnsupportedOperationException();
        }
        if (propertyMapping.target == null && property._genericType()._rawType() instanceof Class)
        {
            return HelperModelBuilder.getTypeFullPath(property._genericType()._rawType(), "_", context.pureModel.getExecutionSupport());
        }
        return HelperMappingBuilder.getPropertyMappingTargetId(propertyMapping);
    }

    private Property resolvePropertyForLakehousePropertyMapping(LakehousePropertyMapping propertyMapping, Root_meta_external_ingest_metamodel_pure_LakehouseSetImplementation immediateParent, CompileContext context)
    {
        String propertyName = propertyMapping.property.property;
        Class<?> _class = getPropertyOwnerForRelationalPropertyMapping(context, propertyMapping, immediateParent);
        return HelperModelBuilder.getPropertyOrResolvedEdgePointProperty(context, _class, Optional.empty(), propertyName, true, propertyMapping.sourceInformation);
    }

    private Class<?> getPropertyOwnerForRelationalPropertyMapping(CompileContext context, LakehousePropertyMapping propertyMapping, Root_meta_external_ingest_metamodel_pure_LakehouseSetImplementation immediateParent)
    {
        if (propertyMapping.property._class != null)
        {
            PropertyOwner owner = context.resolvePropertyOwner(propertyMapping.property._class, propertyMapping.property.sourceInformation);
            return owner instanceof Class<?> ? (Class<?>) owner : HelperModelBuilder.getAssociationPropertyClass((Association) owner, propertyMapping.property.property, propertyMapping.property.sourceInformation, context);
        }
        return immediateParent._class();
    }

    @Override
    public List<Function3<ClassMapping, CompileContext, Set<PackageableElementPointer>>> getExtraClassMappingPrerequisiteElementsPassProcessors()
    {
        return Collections.singletonList(
                (cm, context, prerequisiteElements) ->
                {
                    if (cm instanceof LakehouseClassMapping)
                    {
                        LakehouseClassMapping classMapping = (LakehouseClassMapping) cm;
                        prerequisiteElements.add(new PackageableElementPointer(PackageableElementType.CLASS, classMapping._class, classMapping.classSourceInformation));
                        if (classMapping.ingestPtr != null)
                        {
                            prerequisiteElements.add(new PackageableElementPointer(null, classMapping.ingestPtr.path.get(0), classMapping.ingestPtr.sourceInformation));
                        }
                        if (classMapping.mappingClass != null)
                        {
                            HelperMappingBuilder.collectPrerequisiteElementsFromMappingClass(prerequisiteElements, classMapping.mappingClass, context);
                        }
                        ListIterate.forEach(classMapping.propertyMappings, propertyMapping -> collectPrerequisiteElementsFromLakehousePropertyMapping(prerequisiteElements, (LakehousePropertyMapping) propertyMapping));
                    }
                }
        );
    }

    private void collectPrerequisiteElementsFromLakehousePropertyMapping(Set<PackageableElementPointer> prerequisiteElements, LakehousePropertyMapping propertyMapping)
    {
        collectPrerequisiteElementsFromRelationalOperation(propertyMapping.relationalOperation, prerequisiteElements, propertyMapping.sourceInformation);
    }

    private void collectPrerequisiteElementsFromRelationalOperation(RelationalOperationElement operation, Set<PackageableElementPointer> prerequisiteElements, org.finos.legend.engine.protocol.pure.v1.model.SourceInformation sourceInformation)
    {
        if (operation instanceof IngestRelationColumn)
        {
            IngestRelationColumn column = (IngestRelationColumn) operation;
            if (column.ingestAccessor != null && column.ingestAccessor.path != null && !column.ingestAccessor.path.isEmpty())
            {
                prerequisiteElements.add(new PackageableElementPointer(PackageableElementType.STORE, column.ingestAccessor.path.get(0), column.sourceInformation));
            }
        }
        else if (operation instanceof DynaFunc)
        {
            DynaFunc func = (DynaFunc) operation;
            ListIterate.forEach(func.parameters, param -> collectPrerequisiteElementsFromRelationalOperation(param, prerequisiteElements, func.sourceInformation));
        }
        // Literals don't introduce prerequisites
    }
}
