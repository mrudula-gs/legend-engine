private RelationalOperationElement visitFunctionExpression(LakehouseMappingParserGrammar.FunctionExpressionContext ctx, IngestRelationAccessor ingestPtr)
{
    DynaFunc operation = new DynaFunc();
    operation.sourceInformation = this.walkerSourceInformation.getSourceInformation(ctx);
    
    // Determine if this is a simple function call or database pointer function call
    if (ctx.databasePointer() != null) {
        // Database pointer function call: [db]table->function(...)
        operation.funcName = PureGrammarParserUtility.fromIdentifier(ctx.identifier(1)); // Function name
        
        // Parse source relation: [test::ingest::PersonIngest]Person
        IngestRelationColumn sourceColumn = new IngestRelationColumn();
        sourceColumn.sourceInformation = this.walkerSourceInformation.getSourceInformation(ctx.databasePointer());
        sourceColumn.ingestAccessor = new IngestRelationAccessor();
        sourceColumn.ingestAccessor.sourceInformation = this.walkerSourceInformation.getSourceInformation(ctx.databasePointer());
        String sourceDb = visitDatabasePointer(ctx.databasePointer());
        String sourceTable = PureGrammarParserUtility.fromIdentifier(ctx.identifier(0));
        sourceColumn.ingestAccessor.path = Lists.mutable.with(sourceDb, sourceTable);
        
        // Handle database pointer function calls...
        // Add your existing logic for this case
        
    } else {
        // Simple function call: toUpper(...)
        operation.funcName = PureGrammarParserUtility.fromIdentifier(ctx.identifier(0)); // Function name
    }
    
    operation.parameters = new ArrayList<>();

    // Parse function parameters
    if (ctx.functionExpressionParameters() != null)
    {
        LakehouseMappingParserGrammar.FunctionExpressionParametersContext paramsCtx = ctx.functionExpressionParameters();
        
        if (operation.funcName.equals("join") && paramsCtx.functionOperationArgument().size() >= 3)
        {
            // Handle join logic...
            // Your existing join handling code
        }
        else
        {
            // For non-join functions (e.g., toUpper), use default ingestPtr
            operation.parameters = ListIterate.collect(paramsCtx.functionOperationArgument(), argCtx -> visitFunctionOperationArgument(argCtx, ingestPtr));
        }
    }

    return operation;
}
